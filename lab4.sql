/*Laboratorio BETWEEN1) Mostrar todos los productos cuyo precio de lista esté entre 200 y 300.SQL tabla: Production.ProductMySQL tabla: productcampos: ListPrice*/select * from Production.Productselect ListPrice as PrecioListafrom Production.Productwhere ListPrice between 200 and 300order by PrecioLista asc/*2) Mostrar todos los empleados que nacieron entre 1970 y 1985.SQL tabla: HumanResources.EmployeeMySQL tabla: employeecampos: BirthDate*/select * from HumanResources.Employeeselect BirthDate as cumpleaniosfrom HumanResources.Employeewhere BirthDate between '1970-1-1' and '1985-12-31'order by BirthDate desc/*3) Mostrar el la fecha,numero de version y subtotal de las ventas efectuadas en los años2000 y 2006.SQL tabla:Sales.SalesOrderHeaderMySQL tabla: SalesOrderHeadercampos: OrderDate, AccountNumber, SubTotal*/select * from Sales.SalesOrderHeaderselect OrderDate año,	   AccountNumber numeroCuenta,	   SubTotalfrom Sales.SalesOrderHeaderwhere year(OrderDate) between '2011' and '2014'order by month(OrderDate) desc/*4) Mostrar todos los productos cuyo precio de lista no esté entre 50 y 70.SQL tabla: Production.ProductMySQL tabla: productcampos: ListPrice*/select * from Production.Productselect ListPrice ListaPreciosfrom Production.Productwhere ListPrice not between 50 and 70 order by ListPrice desc/*Laboratorio IN1) Mostrar los códigos de venta y producto, cantidad de venta y precio unitario de losartículos 750, 753 y 770.SQL tablas: Sales.SalesOrderDetailMySQL tabla: SalesOrderDetailcampos: SalesOrderID, ProductID, OrderQty, UnitPrice*/select * from Sales.SalesOrderDetailselect SalesOrderID numeroCompra,	   ProductID numeroProducto,	   OrderQty numeroOrden,	   UnitPrice precioUnitariofrom Sales.SalesOrderDetailwhere ProductID in (750, 753, 770)order by ProductID desc /*2) Mostrar todos los productos cuyo color no sea verde, blanco y azul.SQL tabla: Production.ProductMySQL tabla: productcampos: Color*/select * from Production.Productselect Color from Production.Productwhere Color not in ('Green', 'Black', 'Blue')/*Laboratorio NULL1) Mostrar los representantes de ventas (vendedores) que no tienen definido el númerode territorio.SQL tablas: Sales.SalesPersonMySQL tabla: SalesPersoncampos: BusinessEntityID, TerritoryID*/select * from Sales.SalesPersonselect BusinessEntityID entidadDeNegocio,	   TerritoryID territoriofrom Sales.SalesPersonwhere TerritoryID is null/*2) Mostrar el peso de todos los artículos. si el peso no estuviese definido, reemplazarpor cero.SQL tabla: Production.ProductMySQL tabla: productcampos: Weight*/select * from Production.Productselect 	isnull(Weight, 0) as pesofrom Production.Productorder by Weight descselect 	Weight pesofrom Production.Productwhere Weight is null replace(0)/* Laboratorio Like1) Mostrar el nombre, precio y color de los accesorios para asientos (Seat) de lasbicicletas cuyo precio sea mayor a 100 pesos.SQL tabla: Production.ProductMySQL tabla: Productcampos: Name, ListPrice, Color*/select * from Production.Productselect Name nombre,	   ListPrice listaprecio,	   isnull (Color, 'Desconocido') Colorfrom Production.Productwhere Name like '%Seat%' and ListPrice > 100/*2) Mostrar los nombre de los productos que tengan cualquier combinación de'mountain bike'.SQL tabla: Production.ProductMySQL tabla: Productcampos: Name*/select * from Production.Productselect Name nombresfrom Production.Productwhere Name like '%mountain bike%'/*3) Mostrar las personas que su nombre empiece con la letra 'y'.SQL tabla:Person.PersonMySQL tabla: contactcampos: FirstName*/select * from Person.Personselect FirstName primerNombrefrom Person.Personwhere FirstName like '%y%'select FirstName primerNombrefrom Person.Personwhere FirstName like 'y%'select FirstName primerNombrefrom Person.Personwhere FirstName like '%y'/*4) Mostrar las personas que la segunda letra de su apellido es una s.SQL tabla:Person.PersonMySQL tabla: contactcampos: LastName*/select LastName Apellidofrom Person.Personwhere LastName like '_s%'/*5) Mostrar el nombre concatenado con el apellido de las personas cuyo apellido tenganterminación española (ez).SQL tabla:Person.PersonMySQL tabla: contactcampos: FirstName,LastName*/select FirstName nombre,	   LastName apellidofrom Person.Personwhere LastName like '%ez'/*6) Mostrar los nombres de los productos que terminen en un número.SQL tabla: Production.ProductMySQL tabla: Productcampos: Name*/select Name nombrefrom Production.Productwhere Name like '%[0-9]'--where Name not like '%[a-z, 0-9]'  -- busca simbolos/*7) Mostrar las personas cuyo nombre tenga una C o c como primer carácter, cualquierotro como segundo carácter, ni d ni e ni f ni g como tercer carácter, cualquiera entre j yr o entre s y w como cuarto carácter y el resto sin restricciones.SQL tabla:Person.PersonMySQL tabla: contactcampos: FirstName*/select FirstName nombrefrom Person.Personwhere FirstName like 'c_[^d,e,f,g][j-r,s-w]%'/*Laboratorio Funciones de Agregado1) Mostrar la fecha más reciente de ventaSQL Tabla: Sales.SalesOrderHeaderMySQL Tabla: SalesOrderHeaderCampos: OrderDate*/select top 1 OrderDate FechaOrdenfrom Sales.SalesOrderHeaderorder by OrderDate desc/*2) Mostrar el precio más barato de todas las bicicletasSQL Tabla: Production.ProductMySQL Tabla: ProductCampos: ListPrice, Name*/select top 1 ListPrice PrecioLista,	   Name nombreProductofrom Production.Productwhere Name like '%bike%'order by Nameselect min(ListPrice) precioLista,	   Name NombreProductofrom Production.Productwhere Name like '%bike%'group by Name  /*3) Mostrar la fecha de nacimiento del empleado más jovenSQL Tabla: HumanResources.EmployeeMySQL Tabla: EmployeeCampos: BirthDate*/select * from HumanResources.Employeeselect max(BirthDate) fechaNacimiento		from HumanResources.Employee/*4) Mostrar el promedio del listado de precios de productosSQL Tabla: Production.ProductMySQL Tabla: ProductCampos: ListPrice*/select avg(ListPrice) listaPreciosfrom Production.Product/*5) Mostrar la cantidad y el total vendido por productosSQL Tabla: Sales.SalesOrderDetailMySQL Tabla: SalesOrderDetailCampos: LineTotal, OrderQty*/select * from Sales.SalesOrderDetailselect sum(LineTotal) precioTotal, 	   sum(OrderQty) cantidadOrdenadafrom Sales.SalesOrderDetail/*AGRUPAMIENTO1) Mostrar el código de subcategoría y el precio del producto más barato de cada unade ellasSQL Tabla: Production.ProductMySQL Tabla: ProductCampos: ProductSubcategoryID, ListPrice*/select ProductSubcategoryID subcatigoriaProducto,	   min(ListPrice) PrecioListafrom Production.Productwhere ProductSubcategoryID is not nullgroup by ProductSubcategoryID/*2) Mostrar los productos y la cantidad total vendida de cada uno de ellosSQL Tabla: Sales.SalesOrderDetailMySQL Tabla: SalesOrderDetailCampos: ProductID, OrderQty*/select ProductID,	   sum(OrderQty)from Sales.SalesOrderDetailgroup by ProductIDorder by ProductID desc/*3)Mostrar los productos y el total vendido de cada uno de ellos, ordenarlos por el totalvendidoSQL Tabla: Sales.SalesOrderDetailMySQL Tabla: SalesOrderDetailCampos: ProductID, LineTotal*/select ProductID ListaProductos,	   sum(LineTotal) TotalVendidofrom Sales.SalesOrderDetailgroup by ProductIDorder by TotalVendido/*4) Mostrar el promedio vendido por factura.SQL Tabla: Sales.SalesOrderDetailMySQL Tabla: SalesOrderDetailCampos: SalesOrderID, LineTotal*/select SalesOrderID factura, 	   avg(LineTotal) promediofrom Sales.SalesOrderDetailgroup by SalesOrderID/*5) Trabajamos con la tabla "libros" de una librería Creamos la tabla: */create table libros( codigo int identity, titulo varchar(40), autor varchar(30), editorial varchar(15), precio decimal(5,2), cantidad tinyint, primary key(codigo) ); /*Ingresamos algunos registros:*/insert into libros values('El aleph','Borges','Planeta',15,null); insert into libros values('Martin Fierro','Jose Hernandez','Emece',22.20,200); insert into libros values('Antologia poetica','J.L. Borges','Planeta',null,150); insert into libros values('Aprenda PHP','Mario Molina','Emece',18.20,null); insert into libros values('Cervantes y el quijote','Bioy Casares- J.L. Borges','Paidos',null,100);insert into libros values('El aleph','Borges','Planeta',15,null); insert into libros values('Martin Fierro','Jose Hernandez','Emece',22.20,200); insert into libros values('Antologia poetica','J.L. Borges','Planeta',null,150); insert into libros values('Aprenda PHP','Mario Molina','Emece',18.20,null); insert into libros values('Cervantes y el quijote','Bioy Casares- J.L. Borges','Paidos',null,100);/*5.1) Obtener la cantidad de libros de cada editorial */select editorial, sum(cantidad)from librosgroup by editorial/*5.2) Conocer el total en dinero de los libros agrupados por editorial */--Reemplazando los null del campo Precio por 0select  editorial,        sum(isnull(precio, 0)) PrecioTotalPorEditorialfrom librosgroup by editorial/*5.3) Obtenemos el máximo y mínimo valor de los libros agrupados por editorial*/select editorial,	   max(precio) precioMax,	   min(precio) precioMinfrom libroswhere precio is not nullgroup by editorial /*5.4) Calcular el promedio del valor de los libros agrupados por editorial*/select editorial,	   avg(isnull(precio, 0)) precioPromediofrom librosgroup by editorial /*5.5) Contar y agrupar por editorial considerando solamente los libros cuyo precio esmenor a 30 pesos*/select editorial,	   sum(cantidad) cantidadLibros from libroswhere precio < 30 or precio is nullgroup by editorial, cantidad/*HAVING1) Mostrar todas las facturas realizadas y el total facturado de cada una de ellasordenado por número de factura pero sólo de aquellas órdenes superen un total de$10.000 SQL Tabla: Sales.SalesOrderDetailMySQL Tabla: SalesOrderDetailCampos: SalesOrderID, LineTotal*/select SalesOrderID Facturas,	   sum(LineTotal) TotalFacturafrom Sales.SalesOrderDetailgroup by SalesOrderIDhaving sum(LineTotal) > 10000order by Facturas/*2) Mostrar la cantidad de facturas que vendieron más de 20 unidadesSQL Tabla: Sales.SalesOrderDetailMySQL Tabla: SalesOrderDetailCampos: SalesOrderID, OrderQty*/select SalesOrderID Facturas,	   sum(OrderQty) cantidadProductosfrom Sales.SalesOrderDetailgroup by SalesOrderIDhaving sum(OrderQty) > 20order by cantidadProductosselect SalesOrderID Facturas,	   sum(OrderQty) cantidadProductosfrom Sales.SalesOrderDetailwhere sum(OrderQty) > 20group by SalesOrderIDorder by cantidadProductosselect SalesOrderID,		OrderQtyfrom Sales.SalesOrderDetailwhere SalesOrderID = 43881/*3) Mostrar las subcategorías de los productos que tienen dos o más productos quecuestan menos de $150SQL Tabla: Production.ProductMySQL Tabla: ProductCampos: ProductSubcategoryID, ListPrice*/select ProductSubcategoryID subcategoria,	   ListPrice precioListafrom Production.Productorder by ProductSubcategoryID descselect ProductSubcategoryID subcategoria,	   sum(ListPrice) precioListafrom Production.Productgroup by ProductSubcategoryID having sum(ListPrice) < 150 select ProductSubcategoryID,        sum(ListPrice)  from Production.Product group by ProductSubcategoryID, ListPrice having sum(ListPrice) < 150 and ProductSubcategoryID >= 2 order by ProductSubcategoryID /* 4) Mostrar todos los códigos de categorías existentes junto con la cantidad deproductos y el precio de lista promedio por cada uno de aquellos productos quecuestan más de $ 70 y el precio promedio es mayor a $ 300.SQL Tabla: Production.ProductMySQL Tabla: ProductCampos: ProductSubcategoryID, ListPrice*/select ProductSubcategoryID cantidadProductos,       ProductID,        avg(ListPrice) promediofrom Production.Productgroup by ProductSubcategoryID, ListPrice, ProductIDhaving avg(ListPrice) > 300 and ListPrice > 70order by promedioselect * from Production.Product/*1) Mostrar los empleados que tienen más de 90 horas de vacaciones.SQL tabla: HumanResources.EmployeeMySQL tabla: Employeecampos: VacationHours*/select VacationHours HorasVacacionesfrom HumanResources.Employeewhere VacationHours > 90order by VacationHours desc/*2) Mostrar el nombre, precio y precio con iva de los productos con precio distinto decero.SQL tabla: Production.ProductMySQL tabla: productcampos: Name, ListPrice*/select Name Nombre,	   ListPrice PrecioLista,	   ListPrice * 1.21 PrecioConIvafrom Production.Product order by ListPrice desc/*3) Mostrar precio y nombre de los productos 776, 777, 778.SQL tabla: Production.ProductMySQL tabla: productcampos: ProductID, Name, ListPrice*/select ProductID CodigoProducto,	   Name NombreProducto,	   ListPrice PrecioListafrom Production.Productwhere ProductID in (776, 777, 778)/*Laboratorio DISTINCT, UNION, CASE1) Mostrar los diferentes productos vendidosSQL Tabla: Sales.SalesOrderDetailMySQL Tabla: SalesOrderDetailCampos: ProductID*/select distinct ProductID Productofrom Sales.SalesOrderDetail/*UNION2) Mostrar todos los productos vendidos y ordenadosSQL Tablas: Sales.SalesOrderDetail, Production.WorkOrderMySQL Tablas: SalesOrderDetail, WorkOrderCampos: ProductID*/select ProductID ProductosVendidosfrom  Sales.SalesOrderDetailUNION ALLselect ProductID ProductosVendidosfrom Production.WorkOrderorder by ProductID desc-- con el all trae los repetidos/*3) Mostrar los diferentes productos vendidos y ordenadosSQL Tablas: Sales.SalesOrderDetail, Production.WorkOrderMySQL Tablas: SalesOrderDetail, WorkOrderCampos: ProductID*/select ProductID ProductosVendidosfrom  Sales.SalesOrderDetailUNIONselect ProductID ProductosVendidosfrom Production.WorkOrderorder by ProductID desc/*CASE4) Obtener el id y una columna denominada sexo cuyo valores disponibles seanMasculino y FemeninoSQL Tabla: HumanResources.EmployeeMySQL Tabla: EmployeeCampos: BusinessEntityID, Gender*/SELECT BusinessEntityID Identificacion,	   pepito = case Gender			when 'f' then 'Femenino'			when 'm' then 'Masculino'	   endfrom HumanResources.Employee/*5) Mostrar el id de los empleados si tiene salario deberá mostrarse descendente delo contrario ascendenteSQL Tabla: HumanResources.EmployeeMySQL Tabla: EmployeeCampos: BusinessEntityID, SalariedFlag*/select * from HumanResources.Employeeselect BusinessEntityIDfrom HumanResources.Employeeorder by case SalariedFlag when 0 then BusinessEntityID end asc,		 case SalariedFlag when 1 then BusinessEntityID end desc/*6) Trabajamos con la tabla "libros" de una librería. Eliminamos la tabla si existeCreamos la tabla:*/drop table if exists libros;create table libros( codigo int identity, titulo varchar(40), autor varchar(30), editorial varchar(15), primary key(codigo));/*Ingresamos alguos registros:*/insert into libros values ('El aleph','Borges','Planeta');insert into libros values ('Martin Fierro','Jose Hernandez','Emece');insert into libros values ('Martin Fierro','Jose Hernandez','Planeta');insert into libros values('Antologia poetica','Borges','Planeta');insert into libros values('Aprenda PHP','Mario Molina','Emece');insert into libros values('Aprenda PHP','Lopez','Emece');insert into libros values('Manual de PHP', 'J. Paez', null);insert into libros values('Cervantes y el quijote',null,'Paidos');insert into libros values('Harry Potter y la piedra filosofal','J.K. Rowling','Emece');insert into libros values('Harry Potter y la camara secreta','J.K. Rowling','Emece');insert into libros values('Alicia en el pais de las maravillas','Lewis Carroll','Paidos');insert into libros values('Alicia en el pais de las maravillas','Lewis Carroll','Planeta');insert into libros values('PHP de la A a la Z',null,null);insert into libros values('Uno','Richard Bach','Planeta');/*6.1) obtener la lista de autores sin repetición*/select distinct isnull(autor, 'Desconocido') autores from libros;/*6.2) obtener los nombres de las editoriales sin repetir*/select distinct isnull(editorial, 'Desconocido') from libros;/*6.3) obtener los distintos autores de la editorial "Planeta"*/select distinct isnull(autor, 'Desconocido')  autores	from libroswhere editorial like ('planeta');/*6.4) Mostrar los títulos y editoriales de los libros sin repetir títulos ni editoriales,ordenados por titulos.*/select distinct titulo titulos,	   editorial editorialesfrom librosgroup by editorial, titulo;